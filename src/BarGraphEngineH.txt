/*
 *  BarGraphEngine.h is a part of SBK_PROTONPACK_CORE (VERSION 2.1) code for bar graph animations of a Proton Pack replica
 *  Copyright (c) 2023-2024 Samuel Barab√©
 *
 *  See this page for reference <https://github.com/sbarabe/SBK_PROTONPACK_CORE>.
 *
 *  SBK_PROTONPACK_CORE is free software: you can redistribute it and/or modify it under the terms
 *  of the GNU General Public License as published by the Free Software Foundation, either version
 *  3 of the License, or (at your option) any later version.
 *
 *  SBK_PROTONPACK_CORE is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 *  the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along with Foobar. If not,
 *  see <https://www.gnu.org/licenses/>
 */

#ifndef BARGRAPHENGINE_H
#define BARGRAPHENGINE_H

#include <Arduino.h>
#include "SBK_CONFIG.h"
#include <LedControl.h>
#include <SPI.h>

class BG_HT16K33_Driver
{
public:
    BG_HT16K33_Driver(uint8_t numLeds, bool direction, uint8_t dataPin, uint8_t clockPin);
    void begin();
    void update();
    // Animations
    bool boot(uint8_t bootSp, uint8_t idle1Sp, bool init);
    void idleOne(uint8_t idle1Sp);
    void idleTwo(uint8_t idle2Sp);
    void firing(uint8_t firingSp);
    bool shuttingDown(uint8_t shutdownSp, bool init);
    void clear();
    bool bootState;

private:
    void _setHigh();
    void _setLow();
    void _setLed(uint8_t ledNum, bool state);
    void _setLeds(uint32_t ledsState);
    uint8_t _numLeds;
    bool _direction;
    uint8_t _latchPin;
    uint8_t _clockPin;
    uint8_t _dataPin;
    LedControl _bargraph;
    unsigned long _prevTime;
    bool _ledState[28];
    int8_t _runningLedTracker;
    bool _reverseSeqTracker;
    int8_t _fireSeqTracker;
};

class BG_MAX72xx_Driver
{
public:
    BG_MAX72xx_Driver(uint8_t numLeds, bool direction, uint8_t dataPin, uint8_t clockPin, uint8_t latchPin);
    void begin();
    void update();
    // Animations
    bool boot(uint8_t bootSp, uint8_t idle1Sp, bool init);
    void idleOne(uint8_t idle1Sp);
    void idleTwo(uint8_t idle2Sp);
    void firing(uint8_t firingSp);
    bool shuttingDown(uint8_t shutdownSp, bool init);
    void clear();
    bool bootState;

private:
    void _setHigh();
    void _setLow();
    void _setLed(uint8_t ledNum, bool state);
    void _setLeds(uint32_t ledsState);
    uint8_t _numLeds;
    bool _direction;
    uint8_t _latchPin;
    uint8_t _clockPin;
    uint8_t _dataPin;
    LedControl _bargraph;
    unsigned long _prevTime;
    bool _ledState[28];
    int8_t _runningLedTracker;
    bool _reverseSeqTracker;
    int8_t _fireSeqTracker;
};

bool BG_boot(uint8_t bootSp, uint8_t idle1Sp, bool init);
void BG_idleOne(uint8_t idle1Sp);
void BG_idleTwo(uint8_t idle2Sp);
void BG_firing(uint8_t firingSp);
bool BG_shuttingDown(uint8_t shutdownSp, bool init);
void clear();
bool bootState;

void BG_setHigh();
void BG_setLow();
void BG_setLed(uint8_t ledNum, bool state);
void BG_setLeds(uint32_t ledsState);

////////////// CODE and ANIMATIONS TO BE REVIEWED//////////
/*
class BG595Driver
{
public:
    BG595Driver(uint8_t numLeds, bool direction,  uint8_t dataPin, uint8_t clockPin, uint8_t latchPin,unsigned long *currentTime);
    void begin();
    void update();
    void setHigh();
    void setLow();
    void setLed(uint8_t ledNum, bool state);
    void setLeds(uint32_t ledsState);
    // Animations
    bool boot(uint16_t updateSp);
    void idleOne(uint16_t updateSp);
    void idleTwo(uint16_t updateSp);
    void firing(uint16_t updateSp);
    bool shuttingDown(uint16_t updateSp);
    void clear();
    bool bootState;

private:
    uint8_t _numLeds;
    uint8_t _numRegisters;
    uint8_t _latchPin;
    uint8_t _clockPin;
    uint8_t _dataPin;
    bool _direction;
    unsigned long *_currentTime; // pointer to main loop current time
    unsigned long _prevTime;
    uint32_t _ledsState;
    uint8_t _runningLedTracker;
    bool _reverseSeqTracker;
    uint8_t _fireSeqTracker;

    void shiftOut(uint8_t val);
};
*/

#endif